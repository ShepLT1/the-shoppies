{"version":3,"sources":["features/search/SearchSlice.js","features/results/ResultSlice.js","features/search/Search.js","features/nominations/NominationSlice.js","movie-placeholder.jpg","features/results/Results.js","features/nominations/Nominations.js","App.js","app/store.js","serviceWorker.js","index.js","features/results/results.module.css","features/search/search.module.css","features/nominations/nominations.module.css"],"names":["searchSlice","createSlice","name","initialState","value","reducers","updateSearch","state","action","payload","getSearch","search","actions","resultSlice","updateResults","getResults","results","Search","useSelector","dispatch","useDispatch","handleSearch","e","preventDefault","axios","get","params","type","then","data","index","updatedResultArr","movie","title","Title","year","Year","poster","Poster","push","catch","console","log","Grid","id","styles","searchGrid","Header","as","searchHeader","Row","searchRow","Column","width","searchCol","Form","onSubmit","Input","searchBar","autoComplete","icon","Icon","inverted","circular","link","onClick","placeholder","onChange","target","nominationSlice","updateNominations","getNominations","nominations","Results","handleNominate","nomArr","getAttribute","localStorage","setItem","JSON","stringify","disableButton","i","length","centered","Message","warning","nomBanner","Content","nomBannerText","resultHeader","className","map","item","resultsCol","mobile","tablet","computer","Card","resultsCard","Image","src","wrapped","ui","moviePlaceholder","Meta","nomBtnContainer","Button","color","disabled","nomBtn","data-title","data-year","data-poster","Nominations","nomHeader","nomColumn","List","Item","nomItem","nomImgTextContainer","size","rounded","nomTextContainer","Description","data-id","newNomsArr","splice","handleRemoval","App","localNoms","parse","getItem","stackable","columns","store","configureStore","reducer","searchReducer","resultReducer","nominationReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.1a026fde.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n    value: \"\"\r\n}\r\n\r\nconst searchSlice = createSlice({\r\n    name: \"search\",\r\n    initialState,\r\n    reducers: {\r\n        updateSearch: (state, action) => {\r\n            state.value = action.payload\r\n        }\r\n    }\r\n});\r\n\r\nexport const getSearch = (state) => state.search.value;\r\n\r\nexport const { updateSearch } = searchSlice.actions;\r\nexport default searchSlice.reducer;","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n    value: []\r\n}\r\n\r\nconst resultSlice = createSlice({\r\n    name: \"results\",\r\n    initialState,\r\n    reducers: {\r\n        updateResults: (state, action) => {\r\n            state.value = action.payload\r\n        }\r\n    }\r\n});\r\n\r\nexport const getResults = (state) => state.results.value;\r\n\r\nexport const { updateResults } = resultSlice.actions;\r\nexport default resultSlice.reducer;","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { updateSearch, getSearch } from './SearchSlice';\r\nimport { updateResults } from '../results/ResultSlice';\r\nimport axios from 'axios';\r\nimport { Form, Grid, Icon, Header } from 'semantic-ui-react'\r\nimport styles from './search.module.css';\r\n\r\nexport function Search() {\r\n\r\n    const search = useSelector(getSearch);\r\n    const dispatch = useDispatch();\r\n\r\n    // free api key, no need to hide in .env file\r\n    const apiKey = '71fc9876'\r\n\r\n    // searches OMDB for movie based on user input & updates results\r\n    const handleSearch = (e) => {\r\n        e.preventDefault();\r\n        axios.get(`https://www.omdbapi.com/?s=${search}&apikey=${apiKey}`, {\r\n            params: {\r\n                type: 'movie'\r\n            }\r\n        }).then((data) => {\r\n            let index = 0;\r\n            const updatedResultArr = [];\r\n            let results = data.data.Search\r\n            while (results[index]) {\r\n                const movie = {\r\n                    title: results[index].Title,\r\n                    year: results[index].Year,\r\n                    poster: results[index].Poster\r\n                }\r\n                updatedResultArr.push(movie)\r\n                index++\r\n            }\r\n            dispatch(updateResults(updatedResultArr));\r\n        }).catch((e) => {\r\n            console.log(e)\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Grid id={styles.searchGrid}>\r\n            <Header as='h3' id={styles.searchHeader}>Search Movie Titles</Header>\r\n            <Grid.Row id={styles.searchRow}>\r\n                <Grid.Column width={12} id={styles.searchCol}>\r\n                    <Form onSubmit={handleSearch}>\r\n                        <Form.Input\r\n                            id={styles.searchBar}\r\n                            autoComplete='off'\r\n                            icon={<Icon name='search' inverted circular link onClick={handleSearch}/>}\r\n                            placeholder='Search...'\r\n                            onChange={(e) => {dispatch(updateSearch(e.target.value))}}\r\n                        />\r\n                    </Form>\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n        </Grid>\r\n    )\r\n}","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n    value: []\r\n}\r\n\r\nconst nominationSlice = createSlice({\r\n    name: \"nominations\",\r\n    initialState,\r\n    reducers: {\r\n        updateNominations: (state, action) => {\r\n            state.value = action.payload\r\n        }\r\n    }\r\n});\r\n\r\nexport const getNominations = (state) => state.nominations.value;\r\n\r\nexport const { updateNominations } = nominationSlice.actions;\r\nexport default nominationSlice.reducer;","export default __webpack_public_path__ + \"static/media/movie-placeholder.0e45f6f6.jpg\";","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Grid, Card, Image, Button, Header, Message, Icon } from 'semantic-ui-react';\r\nimport { getResults } from './ResultSlice';\r\nimport { getNominations, updateNominations } from '../nominations/NominationSlice';\r\nimport moviePlaceholder from '../../movie-placeholder.jpg';\r\nimport styles from './results.module.css';\r\n\r\nexport function Results() {\r\n\r\n    const results = useSelector(getResults);\r\n    const nominations = useSelector(getNominations);\r\n    const dispatch = useDispatch();\r\n\r\n    // updates nominations with nominated movie, stores updated nominations array in local storage\r\n    const handleNominate = (target) => {\r\n        const nomArr = [...nominations]\r\n        const title = target.getAttribute('data-title');\r\n        const year = target.getAttribute('data-year');\r\n        const poster = target.getAttribute('data-poster');\r\n        nomArr.push({title: title, year: year, poster: poster})\r\n        localStorage.setItem('nominations', JSON.stringify(nomArr))\r\n        dispatch(updateNominations(nomArr))\r\n    }\r\n\r\n    // returns true if nominate button should be disabled\r\n    const disableButton = (movie) => {\r\n        for (let i = 0; i < nominations.length; i++) {\r\n            if (nominations[i].title === movie.title && nominations[i].year === movie.year && nominations[i].poster === movie.poster) {\r\n                return true\r\n            }\r\n        }\r\n        return false\r\n    }\r\n\r\n    return (\r\n        <Grid centered>\r\n            {nominations.length === 5 ? (\r\n                <Message warning id={styles.nomBanner} icon>\r\n                    <Icon name='trophy' />\r\n                    <Message.Content id={styles.nomBannerText}>\r\n                        <Message.Header>Way to go! You've nominated 5 movies!</Message.Header>\r\n                        <p>Max limit reached</p>\r\n                    </Message.Content>\r\n                </Message>\r\n            ):(\r\n                <></>\r\n            )}\r\n            <Grid.Row centered>\r\n                <Header as='h3' id={styles.resultHeader}>\r\n                    Search Results\r\n                    <div className='titleLine'></div>\r\n                </Header>\r\n            </Grid.Row>\r\n            <Grid.Row centered>\r\n                {results.map((item, i) => {\r\n                    return <Grid.Column key={i} className={styles.resultsCol} mobile={16} tablet={8} computer={4}>\r\n                        <Card className={styles.resultsCard}>\r\n                            {item.poster !== \"N/A\" ? (<Image src={item.poster} wrapped ui={false} />):(<Image src={moviePlaceholder} wrapped ui={false} />)}\r\n                            <Card.Content>\r\n                                <Card.Header>{item.title}</Card.Header>\r\n                                <Card.Meta>\r\n                                    <span className='date'>{item.year}</span>\r\n                                </Card.Meta>\r\n                            </Card.Content>\r\n                            <Card.Content className={styles.nomBtnContainer}>\r\n                            {disableButton(item) === true || nominations.length === 5 ? (\r\n                                <Button color='black' disabled className={styles.nomBtn} data-title={item.title} data-year={item.year} data-poster={item.poster} onClick={(e) =>{handleNominate(e.target)}}>Nominate</Button>\r\n                            ):(\r\n                                <Button color='black' className={styles.nomBtn} data-title={item.title} data-year={item.year} data-poster={item.poster} onClick={(e) =>{handleNominate(e.target)}}>Nominate</Button>\r\n                            )}\r\n                            </Card.Content>\r\n                        </Card>\r\n                    </Grid.Column>\r\n                })}\r\n            </Grid.Row>\r\n        </Grid>\r\n    )\r\n}","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getNominations, updateNominations } from './NominationSlice';\r\nimport { Grid, List, Image, Header, Button } from 'semantic-ui-react';\r\nimport styles from './nominations.module.css';\r\n\r\nexport function Nominations() {\r\n\r\n    const nominations = useSelector(getNominations);\r\n    const dispatch = useDispatch();\r\n\r\n    // removes nomination from redux store & local storage\r\n    const handleRemoval = (target) => {\r\n        const id = target.getAttribute('data-id');\r\n        const newNomsArr = [...nominations]\r\n        newNomsArr.splice(id, 1)\r\n        localStorage.setItem('nominations', JSON.stringify(newNomsArr))\r\n        dispatch(updateNominations(newNomsArr));\r\n    }\r\n\r\n    return (\r\n        <Grid centered>\r\n            <Grid.Row centered>\r\n                <Header as='h3' id={styles.nomHeader}>\r\n                    Nominations\r\n                    <div className='titleLine'></div>\r\n                </Header>\r\n            </Grid.Row>\r\n            <Grid.Row centered>\r\n                <Grid.Column id={styles.nomColumn}>\r\n                    <List>\r\n                        {nominations.map((item, i) => {\r\n                            return <List.Item key={i} className={styles.nomItem}>\r\n                                <div className={styles.nomImgTextContainer}>\r\n                            <Image src={item.poster} size='tiny' rounded />\r\n                            <List.Content className={styles.nomTextContainer}>\r\n                                <List.Header>{item.title}</List.Header>\r\n                                <List.Description>\r\n                                {item.year}\r\n                                </List.Description>\r\n                            </List.Content>\r\n                            </div>\r\n                            <Button color='black' data-id={i} onClick={(e) => {handleRemoval(e.target)}}>\r\n                                Remove\r\n                            </Button>\r\n                            </List.Item>\r\n                        })}\r\n                    </List>\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n        </Grid>\r\n    )\r\n}","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Search } from './features/search/Search';\nimport { Results } from './features/results/Results';\nimport { Nominations } from './features/nominations/Nominations';\nimport { updateNominations } from './features/nominations/NominationSlice';\nimport { Grid, Header } from 'semantic-ui-react';\nimport './App.css';\n\nfunction App() {\n\n  const dispatch = useDispatch();\n\n  // retrieves stored nominations on page load\n  const localNoms = JSON.parse(localStorage.getItem('nominations'));\n  dispatch(updateNominations(localNoms));\n\n  return (\n    <Grid centered stackable id='grid'>\n      <Header id='pageHeader' as='h1'>\n        The Shoppies\n        <div id='pageHeadLine'></div>\n        </Header>\n      <Grid.Row id='searchContainer'>\n        <Search />\n      </Grid.Row>\n      <Grid.Row columns={2}>\n        <Grid.Column width={11}>\n          <Results />\n        </Grid.Column>\n        <Grid.Column width={5}>\n          <Nominations />\n        </Grid.Column>\n      </Grid.Row>\n    </Grid>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport searchReducer from '../features/search/SearchSlice';\nimport resultReducer from '../features/results/ResultSlice';\nimport nominationReducer from '../features/nominations/NominationSlice'\n\nexport const store = configureStore({\n  reducer: {\n    search: searchReducer,\n    results: resultReducer,\n    nominations: nominationReducer\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"resultsCol\":\"results_resultsCol__2aZKr\",\"resultHeader\":\"results_resultHeader__30E9u\",\"resultsCard\":\"results_resultsCard__ZHxLK\",\"nomBtnContainer\":\"results_nomBtnContainer__3sSAA\",\"nomBtn\":\"results_nomBtn__1uUgL\",\"nomBanner\":\"results_nomBanner__2M15A\",\"nomBannerText\":\"results_nomBannerText__2_ciy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchGrid\":\"search_searchGrid__3h1Sn\",\"searchRow\":\"search_searchRow__3zJhy\",\"searchHeader\":\"search_searchHeader__gxsYH\",\"searchBar\":\"search_searchBar__3vWcN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nomItem\":\"nominations_nomItem__3yl7E\",\"nomColumn\":\"nominations_nomColumn__dFueZ\",\"nomHeader\":\"nominations_nomHeader__VH0lf\",\"nomImgTextContainer\":\"nominations_nomImgTextContainer__3VUYw\",\"nomTextContainer\":\"nominations_nomTextContainer__2DoR4\"};"],"sourceRoot":""}